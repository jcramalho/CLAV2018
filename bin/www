#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('M51-CLAV_WEB:server');
var http = require('http');
var socket = require('socket.io');
var open = require('amqplib').connect('amqp://localhost');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '7779');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * RabbitMQ WebSockets
 */
var io = socket(server);

io.on('connection', (socket) => {
    console.log('made socket connection', socket.id);

    // Handle eamil event
    socket.on('email', (data) => {
        q = data.email;
        console.log(data.email)
        // Consumer
        open.then((conn) => conn.createChannel())
            .then((ch) => {
                return ch.assertQueue(q)
                    .then((ok) => {
                        channel = ch
                        ch.consume(q, (msg) => {
                            io.sockets.emit(q, msg.content.toString());
                            ms = msg;
                            console.log(" [x] %s:'%s'", msg.fields.routingKey, msg.content.toString());
                        }, {
                            noAck: false
                        });
                    });
            }).catch(console.warn);
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

//Garante que o servidor só começa a aceitar pedidos quando as conexões
//ao MongoDB e GraphDB foram confirmadas e que o carregamento para cache
//da informação foi iniciado
app.once('ready', () => {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    console.log(`Servidor à escuta na porta ${port}...`);
})
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
