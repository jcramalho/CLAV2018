#!/usr/bin/env node

/**
 * Module dependencies.
 */

var appHTTPS = require('../app');
var debug = require('debug')('M51-CLAV_WEB:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var databases = require('../config/database')
var certsFolder = './ssl/'

/**
 * Get port from environment and store in Express.
 */

var portHTTP = normalizePort(databases.portHTTP);
var portHTTPS = normalizePort(databases.portHTTPS);
appHTTPS.set('port', portHTTPS);

/**
 * Create HTTP and HTTPS server.
 */

var express = require('express')
var appHTTP = express()

appHTTP.use(express.static(__dirname + '/../public_ssl'));
appHTTP.use((req, res) => {
    //Redirect HTTP to HTTPS
    res.statusCode = 301;
    var domain = req.headers.host ? req.headers.host.replace(/:[0-9]+$/g,`:${portHTTPS}`) : ""
    res.setHeader('Location', `https://${domain}${req.url}`);
    res.end();
})

var HTTPserver = http.createServer(appHTTP);

//create options object for https, reading the cert files. If one cert file does not exist returns an empty object
function getCert(){
    var options
    try{
        options = {
            key: fs.readFileSync(certsFolder + "key.pem"),
            cert: fs.readFileSync(certsFolder + "cert.pem"),
            ca: fs.readFileSync(certsFolder + "fullchain.pem")
        }
    }catch(err){
        options = {}
    }
    return options
}

var HTTPSserver = https.createServer(getCert(), appHTTPS);

//checks if certFolder exists and create it if not
if(!fs.existsSync(certsFolder)){
    fs.mkdirSync(certsFolder)
}

//reload certificate without reloading server
var timeout
//checks when files changes (renewed certificate)
fs.watch(certsFolder, () => {
    clearTimeout(timeout);
    timeout = setTimeout(() => {
        //reloads options object
        //WARNING: needs nodejs v11
        HTTPSserver.setSecureContext(getCert())
    }, 1000);
})

/**
 * Listen on provided port, on all network interfaces.
 */

//Garante que o servidor só começa a aceitar pedidos quando as conexões
//ao MongoDB e GraphDB foram confirmadas e que o carregamento para cache
//da informação foi iniciado
appHTTPS.once('ready', () => {
    HTTPserver.listen(portHTTP);
    HTTPserver.on('error', onError(portHTTP));
    HTTPserver.on('listening', onListening(HTTPserver));
    console.log(`Servidor HTTP à escuta na porta ${portHTTP}...`);

    HTTPSserver.listen(portHTTPS);
    HTTPSserver.on('error', onError(portHTTPS));
    HTTPSserver.on('listening', onListening(HTTPSserver));
    console.log(`Servidor HTTPS à escuta na porta ${portHTTPS}...`);
})
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(port) {
    return function (error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
    return function() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }
}
